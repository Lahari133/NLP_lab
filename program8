import numpy as np
from keras.models import Sequential
from keras.layers import LSTM, Dense
from keras.callbacks import LambdaCallback
import random

# Load and preprocess text
with open('text_corpus.txt', 'r', encoding='utf-8') as f:
    text = f.read().lower()
chars = sorted(list(set(text)))
char_indices, indices_char = {c: i for i, c in enumerate(chars)}, {i: c for i, c in enumerate(chars)}

# Create sequences
max_len, step = 40, 3
sentences = [text[i: i + max_len] for i in range(0, len(text) - max_len, step)]
next_chars = [text[i + max_len] for i in range(0, len(text) - max_len, step)]
x = np.zeros((len(sentences), max_len, len(chars)), dtype=np.bool)
y = np.zeros((len(sentences), len(chars)), dtype=np.bool)
for i, sentence in enumerate(sentences):
    for t, char in enumerate(sentence):
        x[i, t, char_indices[char]] = 1
    y[i, char_indices[next_chars[i]]] = 1

# Build and compile the model
model = Sequential([LSTM(128, input_shape=(max_len, len(chars))), Dense(len(chars), activation='softmax')])
model.compile(loss='categorical_crossentropy', optimizer='adam')

# Sampling function
def sample(preds, temperature=1.0):
    preds = np.log(np.asarray(preds).astype('float64')) / temperature
    exp_preds = np.exp(preds)
    return np.argmax(np.random.multinomial(1, exp_preds / np.sum(exp_preds), 1))

# Text generation function
def generate_text(seed_text, temperature=0.5, length=400):
    for _ in range(length):
        x_pred = np.zeros((1, max_len, len(chars)))
        for t, char in enumerate(seed_text):
            x_pred[0, t, char_indices[char]] = 1
        preds = model.predict(x_pred, verbose=0)[0]
        next_char = indices_char[sample(preds, temperature)]
        seed_text = seed_text[1:] + next_char
    return seed_text

# Callback to generate text during training
def on_epoch_end(epoch, _):
    start_index = random.randint(0, len(text) - max_len - 1)
    for temperature in [0.2, 0.5, 1.0]:
        seed_text = text[start_index: start_index + max_len]
        print(f'----- Temperature: {temperature}\n{generate_text(seed_text, temperature)}')

# Train the model
model.fit(x, y, batch_size=128, epochs=30, callbacks=[LambdaCallback(on_epoch_end=on_epoch_end)])
